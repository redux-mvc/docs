{"version":3,"sources":["webpack:///./src/pages/model/usage.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAcN,EAAc,eAC5BO,EAAaP,EAAc,cAC3BQ,EAAc,CAClBT,gBAEIU,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGV,E,oIACF,mBACD,OAAO,YAACO,EAAD,KAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,cAG5E,YAACR,EAAD,CAAiBQ,QAAQ,mBACvB,4GACA,oDAAmC,kBAAIC,WAAW,KAAf,aAAnC,4BAAqG,kBAAIA,WAAW,KAAf,WAArG,QAAiJ,kBAAIA,WAAW,KAAf,WAAjJ,cAEF,YAACR,EAAD,CAAaO,QAAQ,eACvB,YAACN,EAAD,CAAYM,QAAQ,cAApB,WACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,WACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,YACA,YAACN,EAAD,CAAYM,QAAQ,cAApB,YAEE,kCACA,iCACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,gDAAoE,kBAAIA,WAAW,KAAf,UAApE,8BACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,iOAerB,iBAAGA,WAAW,MAAd,yBAA6C,kBAAIA,WAAW,KAAf,UAA7C,yDACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,iSAqBzB,iCACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wEAA4F,kBAAIA,WAAW,KAAf,UAA5F,8BACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,iOAerB,iBAAGA,WAAW,MAAd,yBAA6C,kBAAIA,WAAW,KAAf,UAA7C,uDACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,4VAqBrB,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,SAAnB,mBAAgF,kBAAIA,WAAW,KAAf,WAAhF,0BAA8I,kBAAIA,WAAW,KAAf,OAA9I,mBAAiM,kBAAIA,WAAW,KAAf,SAAjM,YAA+O,kBAAIA,WAAW,KAAf,UAA/O,aAA+R,kBAAIA,WAAW,KAAf,YAA/R,OAGJ,kCACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gFACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,mNAavB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0BAA8C,0BAAYA,WAAW,KAAvB,SAA9C,QAAwG,0BAAYA,WAAW,KAAvB,UAAxG,2EAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gFAGJ,iCACA,qBAAG,kBAAIA,WAAW,KAAf,aAAH,qCAA8E,kBAAIA,WAAW,KAAf,kBAA9E,+BACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,oBACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,uRAgBrB,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,OAAnB,QAA2E,0BAAYA,WAAW,KAAvB,SAA3E,0EACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,0eAgC7BH,EAAWI,gBAAiB","file":"component---src-pages-model-usage-mdx-b2982e727f17a32c2d7e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/gonzaloacosta/workspace/redux-mvc-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The model will be defined by the initial state and reducers, just like plain redux.`}</p>\n      <p>{`The main difference is that `}<em parentName=\"p\">{`redux-mvc`}</em>{` will dynamically create `}<em parentName=\"p\">{`getters`}</em>{` and `}<em parentName=\"p\">{`actions`}</em>{` for you.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Getters</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Setters</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Reducers</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Actions</AnchorLink>\n    </AnchorLinks>\n    <h2>{`iniState`}</h2>\n    <h3>{`Getters`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For each property key in the initial state a `}<em parentName=\"p\">{`getter`}</em>{` function will be created:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { createModel } from \"@redux-mvc/core\"\n\nconst model = createModel({\n    iniState: {\n      count: 0,\n    },\n    namespace: \"Counter\",\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n`}</code></pre>\n        <p parentName=\"li\">{`will generate a count `}<em parentName=\"p\">{`getter`}</em>{` (selector) to get the count out of the current state`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`import { connect } from \"@redux-mvc/core\"\nimport { getters } from \"./model\"\n\nconst decorate = connect(\n    { count: getters.count },\n    ...\n)\n\nconst Counter = ({ \n    count = 0, \n    ...\n}) => (\n    <div ...>\n        Count: <input value={count} ... />\n    </div>\n)\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`Setters`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Similar to the getters, for each property key of the initial state a `}<em parentName=\"p\">{`setter`}</em>{` function will be created:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`import { createModel } from \"@redux-mvc/core\"\n\nconst model = createModel({\n    iniState: {\n      count: 0,\n    },\n    namespace: \"Counter\",\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n`}</code></pre>\n        <p parentName=\"li\">{`will generate a count `}<em parentName=\"p\">{`setter`}</em>{` (action) to set the count out of the current state`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { connect } from \"@redux-mvc/core\"\nimport { actions } from \"./model\"\n\nconst decorate = connect(\n    ...\n    {\n        setCount: e => actions.setCount(Number(e.target.value)),\n    }\n)\n\nconst Counter = ({ \n    setCount = noop, \n    ...\n}) => (\n    <div ...>\n        Count: <input onChange={setCount} ... />\n    </div>\n)\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note:`}</strong>{` Check that the `}<em parentName=\"p\">{`setters`}</em>{` will be prefixed with `}<em parentName=\"p\">{`set`}</em>{`. E.g.: for the `}<em parentName=\"p\">{`count`}</em>{` key the `}<em parentName=\"p\">{`setter`}</em>{` would be `}<em parentName=\"p\">{`setCount`}</em>{`.`}</p>\n      </li>\n    </ul>\n    <h2>{`Reducers`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The module reducer will be created out of a collection of reducer functions:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { createModel } from \"@redux-mvc/core\"\n\nconst model = createModel({\n    reducers: {\n        add: ({ count }) => ({ count: count + 1 }),\n        reset: R.always(iniState),\n    },\n    ...\n})\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The reducers will take `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{` as parameters, and they will return the partial state to be updated. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The returned partial state will be shallow merged with the previous state.`}</p>\n      </li>\n    </ul>\n    <h3>{`Actions`}</h3>\n    <p><em parentName=\"p\">{`redux-mvc`}</em>{` will also dynamically create one `}<em parentName=\"p\">{`action creator`}</em>{` for each reducer function.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Given this model`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { createModel } from \"@redux-mvc/core\"\n\nconst model = createModel({\n    reducers: {\n        add: ({ count }) => ({ count: count + 1 }),\n        reset: R.always(iniState),\n    },\n    ...\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n`}</code></pre>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`add`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`reset`}</inlineCode>{` actions will be dynamically generated and can later be used in views:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { connect } from \"@redux-mvc/core\"\nimport { actions } from \"./model\"\n\nconst decorate = connect(\n    ...\n    { add: actions.add, reset: actions.reset }\n)\n\nconst Counter = ({\n    add = noop,\n    reset = noop,\n    ...\n}) => (\n    <div ...>\n        <button style={{ marginRight: 10 }} onClick={add}>\n            add\n        </button>\n        <button style={{ marginRight: 10 }} onClick={reset}>\n            reset\n        </button>\n        ...\n    </div>\n)\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}