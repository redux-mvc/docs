{"componentChunkName":"component---src-pages-model-getting-started-index-mdx","path":"/model/getting-started/","result":{"pageContext":{"frontmatter":{"title":"Getting started","description":"Getting started with redux-mvc"},"relativePagePath":"/model/getting-started/index.mdx","titleType":"page","MdxNode":{"id":"c4d33eec-46fa-5aab-99a6-88717f37d036","children":[],"parent":"c8ca746e-ede4-5f29-9ef7-c40f99588f67","internal":{"content":"---\ntitle: Getting started\ndescription: Getting started with redux-mvc\n---\n\n<PageDescription>\n\nThe model will be defined by the initial state and reducers, just like plain redux.\n\nThe main difference is that *redux-mvc* will dynamically create *getters* and *actions* for you.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>Getters</AnchorLink>\n  <AnchorLink>Stters</AnchorLink>\n  <AnchorLink>Reducers</AnchorLink>\n  <AnchorLink>Actions</AnchorLink>\n</AnchorLinks>\n\n## iniState\n\n### Getters\n\n- For each property key in the initial state a *getter* function will be created:\n\n  ```ts\n  const model = createModel({\n      iniState: {\n        count: 0,\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  will generate a count *getter* (selector) to get the count out of the current state\n\n  ```js\n  import { getters } from \"./model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      ...\n  )\n\n  const Counter = ({ \n      count = 0, \n      ...\n  }) => (\n      <div ...>\n          Count: <input value={count} ... />\n      </div>\n  )\n  ```\n\n### Setters\n\n- Similar to the getters, for each property key of the initial state a *setter* function will be created:\n\n  ```js\n  const model = createModel({\n      iniState: {\n        count: 0,\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  will generate a count *setter* (action) to set the count out of the current state\n\n  ```ts\n  import { actions } from \"./model\"\n\n  const decorate = connect(\n      ...\n      {\n          setCount: e => actions.setCount(Number(e.target.value)),\n      }\n  )\n\n  const Counter = ({ \n      setCount = noop, \n      ...\n  }) => (\n      <div ...>\n          Count: <input onChange={setCount} ... />\n      </div>\n  )\n  ```\n\n  **Note:** Check that the *setters* will be prefixed with *set*. E.g.: for the *count* key the *setter* would be *setCount*.\n\n\n## Reducers\n\n- The module reducer will be created out of a collection of reducer functions:\n\n  ```ts\n  const model = createModel({\n      reducers: {\n          add: ({ count }) => ({ count: count + 1 }),\n          reset: R.always(iniState),\n      },\n      ...\n  })\n  ```\n\n- The reducers will take `state` and `action` as parameters, and they will return the partial state to be updated. \n\n- The returned partial state will be shallow merged with the previous state.\n\n### Actions\n\n*redux-mvc* will also dinamically create one *action creator* for each reducer function.\n\n- Given this model\n\n  ```ts\n  const model = createModel({\n      reducers: {\n          add: ({ count }) => ({ count: count + 1 }),\n          reset: R.always(iniState),\n      },\n      ...\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  `add` and `reset` actions will be dinamically generated and can later be used in views:\n\n  ```ts\n  import { actions } from \"./model\"\n\n  const decorate = connect(\n      ...\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      add = noop,\n      reset = noop,\n      ...\n  }) => (\n      <div ...>\n          <button style={{ marginRight: 10 }} onClick={add}>\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          ...\n      </div>\n  )\n  ```\n","type":"Mdx","contentDigest":"8c4194e52d59bfd13b84b48a90b59bd2","counter":176,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Getting started","description":"Getting started with redux-mvc"},"exports":{},"rawBody":"---\ntitle: Getting started\ndescription: Getting started with redux-mvc\n---\n\n<PageDescription>\n\nThe model will be defined by the initial state and reducers, just like plain redux.\n\nThe main difference is that *redux-mvc* will dynamically create *getters* and *actions* for you.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>Getters</AnchorLink>\n  <AnchorLink>Stters</AnchorLink>\n  <AnchorLink>Reducers</AnchorLink>\n  <AnchorLink>Actions</AnchorLink>\n</AnchorLinks>\n\n## iniState\n\n### Getters\n\n- For each property key in the initial state a *getter* function will be created:\n\n  ```ts\n  const model = createModel({\n      iniState: {\n        count: 0,\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  will generate a count *getter* (selector) to get the count out of the current state\n\n  ```js\n  import { getters } from \"./model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      ...\n  )\n\n  const Counter = ({ \n      count = 0, \n      ...\n  }) => (\n      <div ...>\n          Count: <input value={count} ... />\n      </div>\n  )\n  ```\n\n### Setters\n\n- Similar to the getters, for each property key of the initial state a *setter* function will be created:\n\n  ```js\n  const model = createModel({\n      iniState: {\n        count: 0,\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  will generate a count *setter* (action) to set the count out of the current state\n\n  ```ts\n  import { actions } from \"./model\"\n\n  const decorate = connect(\n      ...\n      {\n          setCount: e => actions.setCount(Number(e.target.value)),\n      }\n  )\n\n  const Counter = ({ \n      setCount = noop, \n      ...\n  }) => (\n      <div ...>\n          Count: <input onChange={setCount} ... />\n      </div>\n  )\n  ```\n\n  **Note:** Check that the *setters* will be prefixed with *set*. E.g.: for the *count* key the *setter* would be *setCount*.\n\n\n## Reducers\n\n- The module reducer will be created out of a collection of reducer functions:\n\n  ```ts\n  const model = createModel({\n      reducers: {\n          add: ({ count }) => ({ count: count + 1 }),\n          reset: R.always(iniState),\n      },\n      ...\n  })\n  ```\n\n- The reducers will take `state` and `action` as parameters, and they will return the partial state to be updated. \n\n- The returned partial state will be shallow merged with the previous state.\n\n### Actions\n\n*redux-mvc* will also dinamically create one *action creator* for each reducer function.\n\n- Given this model\n\n  ```ts\n  const model = createModel({\n      reducers: {\n          add: ({ count }) => ({ count: count + 1 }),\n          reset: R.always(iniState),\n      },\n      ...\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n  ```\n\n  `add` and `reset` actions will be dinamically generated and can later be used in views:\n\n  ```ts\n  import { actions } from \"./model\"\n\n  const decorate = connect(\n      ...\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      add = noop,\n      reset = noop,\n      ...\n  }) => (\n      <div ...>\n          <button style={{ marginRight: 10 }} onClick={add}>\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          ...\n      </div>\n  )\n  ```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/model/getting-started/index.mdx"}}}}