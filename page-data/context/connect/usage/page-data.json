{"componentChunkName":"component---src-pages-context-connect-usage-mdx","path":"/context/connect/usage/","result":{"pageContext":{"frontmatter":{"title":"Context Docs","tabs":["Usage","Docs"],"description":"Context Docs"},"relativePagePath":"/context/connect/usage.mdx","titleType":"page","MdxNode":{"id":"c48d05ed-360a-54a4-aa7e-1178c5f0120e","children":[],"parent":"c69b4b7b-173d-5306-8e47-89b8de8f36b7","internal":{"content":"---\ntitle: Context Docs\ntabs: ['Usage', 'Docs']\ndescription: Context Docs\n---\n\n<PageDescription>\n\nConnect the *view* to the model by using the *connect* HOC. \n\n</PageDescription>\n\n## Description\n\n  - The *connect* HOC will consume the *selectProps* from the *context module* state, and will inject the decorated *actionProps* from the *context module*.\n\n  - It will use the *instanceId* passed to the connected component by the parent, or it will \n  take the *instanceId* from the context.\n\n  - The *connect* HOC will also act as context provider for the passed *instanceId*.\n\n\n### E.g.:\n  - Given\n\n  ```ts\n  import { connect } from \"@redux-mvc/core\"\n\n  import { getters, actions } from \"../model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      count = 0,\n      add,\n      reset,\n  }) => (\n      <div>\n          <button\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n  )\n\n  export default decorate(Counter)\n  ```\n  \n  **Note:** any connected children of the *Counter* component will keep the right *instanceId* by default.\n\n  - Then we can render different instances of the same *Counter* module.\n\n  ```ts\n  import Counter from \"ui-kit/Counter/View\"\n\n  const Counters = () => (\n      <div>\n          <Counter />\n          <Counter instanceId=\"apples\" />\n          <Counter instanceId=\"oranges\" />\n      </div>\n  )\n  ```\n","type":"Mdx","contentDigest":"c86ee4f7301063e0e17b91afb55759ba","counter":106,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Context Docs","tabs":["Usage","Docs"],"description":"Context Docs"},"exports":{},"rawBody":"---\ntitle: Context Docs\ntabs: ['Usage', 'Docs']\ndescription: Context Docs\n---\n\n<PageDescription>\n\nConnect the *view* to the model by using the *connect* HOC. \n\n</PageDescription>\n\n## Description\n\n  - The *connect* HOC will consume the *selectProps* from the *context module* state, and will inject the decorated *actionProps* from the *context module*.\n\n  - It will use the *instanceId* passed to the connected component by the parent, or it will \n  take the *instanceId* from the context.\n\n  - The *connect* HOC will also act as context provider for the passed *instanceId*.\n\n\n### E.g.:\n  - Given\n\n  ```ts\n  import { connect } from \"@redux-mvc/core\"\n\n  import { getters, actions } from \"../model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      count = 0,\n      add,\n      reset,\n  }) => (\n      <div>\n          <button\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n  )\n\n  export default decorate(Counter)\n  ```\n  \n  **Note:** any connected children of the *Counter* component will keep the right *instanceId* by default.\n\n  - Then we can render different instances of the same *Counter* module.\n\n  ```ts\n  import Counter from \"ui-kit/Counter/View\"\n\n  const Counters = () => (\n      <div>\n          <Counter />\n          <Counter instanceId=\"apples\" />\n          <Counter instanceId=\"oranges\" />\n      </div>\n  )\n  ```\n","fileAbsolutePath":"/home/gonzalo/workspace/mac/redux-mvc-docs/src/pages/context/connect/usage.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","768070550"]}