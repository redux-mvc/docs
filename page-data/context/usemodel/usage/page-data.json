{"componentChunkName":"component---src-pages-context-usemodel-usage-mdx","path":"/context/usemodel/usage/","result":{"pageContext":{"frontmatter":{"title":"UseModel","tabs":["Usage","Docs"],"description":"Guide on how to apply the useModel hook."},"relativePagePath":"/context/usemodel/usage.mdx","titleType":"page","MdxNode":{"id":"4943d016-1eba-5c41-a92c-9787b87d40a5","children":[],"parent":"778d8b60-d3c1-5c59-b7c0-3d05ca09c0bd","internal":{"content":"---\ntitle: UseModel\ntabs: ['Usage', 'Docs']\ndescription: Guide on how to apply the useModel hook.\n---\n\n<PageDescription>\n\nConsumes *state* from the context and wrapps *actionCreators* in the context's dispatch.\n\n</PageDescription>\n\nThe main difference with the *connect* Hoc is that it would not apply the *instanceId* into the context, nor the *renderLevel* that ensures the parents of a component render first.\n\n### E.g.:\n\n```ts\nconst Component = () => {\n    const { count, add } = useModel({\n      count: getters.count,\n    }, {\n      add: actions.add,\n      add: actions.reset\n    }, {\n      instanceId: \"customInstanceId\"\n    })\n\n\n    return (\n      <div>\n          <button\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n    )\n}\n\n```\n","type":"Mdx","contentDigest":"7e437d7a75ae5bf53eb08508473db2b8","counter":105,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"UseModel","tabs":["Usage","Docs"],"description":"Guide on how to apply the useModel hook."},"exports":{},"rawBody":"---\ntitle: UseModel\ntabs: ['Usage', 'Docs']\ndescription: Guide on how to apply the useModel hook.\n---\n\n<PageDescription>\n\nConsumes *state* from the context and wrapps *actionCreators* in the context's dispatch.\n\n</PageDescription>\n\nThe main difference with the *connect* Hoc is that it would not apply the *instanceId* into the context, nor the *renderLevel* that ensures the parents of a component render first.\n\n### E.g.:\n\n```ts\nconst Component = () => {\n    const { count, add } = useModel({\n      count: getters.count,\n    }, {\n      add: actions.add,\n      add: actions.reset\n    }, {\n      instanceId: \"customInstanceId\"\n    })\n\n\n    return (\n      <div>\n          <button\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n    )\n}\n\n```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/context/usemodel/usage.mdx"}}}}