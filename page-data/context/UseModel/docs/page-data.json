{"componentChunkName":"component---src-pages-context-use-model-docs-mdx","path":"/context/UseModel/docs/","result":{"pageContext":{"frontmatter":{"title":"UseModel","tabs":["Usage","Docs"],"description":"Guide on how to apply the useModel hook"},"relativePagePath":"/context/UseModel/docs.mdx","titleType":"page","MdxNode":{"id":"27434bee-337d-5cab-98d2-816d6b085a54","children":[],"parent":"3019a030-f880-5afe-b7bb-de3bb0e4491a","internal":{"content":"---\ntitle: UseModel\ntabs: ['Usage', 'Docs']\ndescription: Guide on how to apply the useModel hook\n---\n\n## useModel\n\nHook.\n\nConsumes the *selectors* and wraps *actions*.\n\n```ts\nuseModel(selectors: Map<Selectors>, actions: Map<ActionCreator>, props: Object)\n```\n\n### Usage\n\n  - Injects *selectorProps*, wrapped *actionProps* and the *instanceId*.\n\n  ```ts\n  const { count, add } = useModel({\n    count: getters.count,\n  }, {\n    add: actions.add,\n  }, {\n    instanceId: \"customInstanceId\"\n  })\n  ```\n\n### Params\n\n  1. `selectors: Map<SelectorFunction> | null`\n\n    The `selectors` that will consume the *state* from the parent *module*.\n\n    Each *key* of the `selectors` Map will be executed against the *module store*.\n\n  2. `actions: Map<ActionCreator> | null`\n\n    Each *key* of the `actions` Map will be wrapped with *module dispatch* function.\n\n  3. `props: Object`\n\n    An `instanceId` passed by props to the hook will take precedence over the context `instanceId`.\n\n### Return value\n\n```ts\nModelProps: {\n  ...selectorProps: Map<Any>,\n  ...wrappedActionProps: Map<Dispatch<ActionCreator>>,\n  instanceId: String\n}\n\n```\n","type":"Mdx","contentDigest":"7696be62c307999067162c0c3473f6d1","counter":109,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"UseModel","tabs":["Usage","Docs"],"description":"Guide on how to apply the useModel hook"},"exports":{},"rawBody":"---\ntitle: UseModel\ntabs: ['Usage', 'Docs']\ndescription: Guide on how to apply the useModel hook\n---\n\n## useModel\n\nHook.\n\nConsumes the *selectors* and wraps *actions*.\n\n```ts\nuseModel(selectors: Map<Selectors>, actions: Map<ActionCreator>, props: Object)\n```\n\n### Usage\n\n  - Injects *selectorProps*, wrapped *actionProps* and the *instanceId*.\n\n  ```ts\n  const { count, add } = useModel({\n    count: getters.count,\n  }, {\n    add: actions.add,\n  }, {\n    instanceId: \"customInstanceId\"\n  })\n  ```\n\n### Params\n\n  1. `selectors: Map<SelectorFunction> | null`\n\n    The `selectors` that will consume the *state* from the parent *module*.\n\n    Each *key* of the `selectors` Map will be executed against the *module store*.\n\n  2. `actions: Map<ActionCreator> | null`\n\n    Each *key* of the `actions` Map will be wrapped with *module dispatch* function.\n\n  3. `props: Object`\n\n    An `instanceId` passed by props to the hook will take precedence over the context `instanceId`.\n\n### Return value\n\n```ts\nModelProps: {\n  ...selectorProps: Map<Any>,\n  ...wrappedActionProps: Map<Dispatch<ActionCreator>>,\n  instanceId: String\n}\n\n```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/context/UseModel/docs.mdx"}}}}