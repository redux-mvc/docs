{"componentChunkName":"component---src-pages-middleware-bridge-usage-mdx","path":"/middleware/bridge/usage/","result":{"pageContext":{"frontmatter":{"title":"Bridge Middleware","tabs":["Usage","Docs"],"description":"Description of the bridge middleware"},"relativePagePath":"/middleware/bridge/usage.mdx","titleType":"page","MdxNode":{"id":"7e46aeab-9af3-575f-8c16-0b62ff022466","children":[],"parent":"5bf7ac3e-ec12-5aea-bf44-47cb6462f4c6","internal":{"content":"---\ntitle: Bridge Middleware\ntabs: ['Usage', 'Docs']\ndescription: Description of the bridge middleware\n---\n\n## addBridge\n\n*redux-mvc* allows to setup a global context that can be accessible from every other child context. It is useful to put any data or state that will be reused among contexts.\n\n\n- To provide the global context you must specify the *contextId* as the special constant *GLOBAL_CONTEXT_ID*:\n\n    ```js\n    const decorate = createContext({\n       module,\n       contextId: GLOBAL_CONTEXT_ID\n    })\n\n    ```\n\n- To consume state from the global context you must pass an array of namespaces to the *addBridge* module decorator:\n\n  ```ts\n  const newModule = R.compose(\n      addBridge({ trackGlobalNamespaces: [RoutingModel.namespace] })\n      ...\n  )(module)\n  \n  Note: The actions from the global namespace will be forwarded to the local context.\n\n  ```\n\n- To choose what kind of actions can be dispatched to the global context you need to specify the *dispatchToGlobal* predicate function:\n\n  ```ts\n  const newModule = R.compose(\n      addBridge({ \n        dispatchToGlobal: action => action.type === \"Routing/push\" \n      })\n      ...\n  )(module)\n\n  ```\n","type":"Mdx","contentDigest":"4671a404bba34801325bc74091685191","counter":104,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Bridge Middleware","tabs":["Usage","Docs"],"description":"Description of the bridge middleware"},"exports":{},"rawBody":"---\ntitle: Bridge Middleware\ntabs: ['Usage', 'Docs']\ndescription: Description of the bridge middleware\n---\n\n## addBridge\n\n*redux-mvc* allows to setup a global context that can be accessible from every other child context. It is useful to put any data or state that will be reused among contexts.\n\n\n- To provide the global context you must specify the *contextId* as the special constant *GLOBAL_CONTEXT_ID*:\n\n    ```js\n    const decorate = createContext({\n       module,\n       contextId: GLOBAL_CONTEXT_ID\n    })\n\n    ```\n\n- To consume state from the global context you must pass an array of namespaces to the *addBridge* module decorator:\n\n  ```ts\n  const newModule = R.compose(\n      addBridge({ trackGlobalNamespaces: [RoutingModel.namespace] })\n      ...\n  )(module)\n  \n  Note: The actions from the global namespace will be forwarded to the local context.\n\n  ```\n\n- To choose what kind of actions can be dispatched to the global context you need to specify the *dispatchToGlobal* predicate function:\n\n  ```ts\n  const newModule = R.compose(\n      addBridge({ \n        dispatchToGlobal: action => action.type === \"Routing/push\" \n      })\n      ...\n  )(module)\n\n  ```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/middleware/bridge/usage.mdx"}}}}