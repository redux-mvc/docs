{"componentChunkName":"component---src-pages-model-docs-mdx","path":"/model/docs/","result":{"pageContext":{"frontmatter":{"title":"Model Docs","tabs":["Usage","Docs"],"description":"Model Docs"},"relativePagePath":"/model/docs.mdx","titleType":"page","MdxNode":{"id":"b592f033-7aa6-52a2-8299-227e65efdc70","children":[],"parent":"816d8313-4b9c-5e43-9b79-b2cafc0d9169","internal":{"content":"---\ntitle: Model Docs\ntabs: ['Usage', 'Docs']\ndescription: Model Docs\n---\n\n<AnchorLinks>\n  <AnchorLink>createModel</AnchorLink>\n  <AnchorLink>getter</AnchorLink>\n  <AnchorLink>actionCreator</AnchorLink>\n</AnchorLinks>\n\n## createModel\n\nCreates a *redux-mvc* model: *getters*, *setters* and *actionCreators*\n\n```js\ncreateModel(definition: ModelDefinition)\n```\n\n### Parameters\n\n  - **definition**\n\n  ```js\n  ModelDefinitionInterface: {\n    namespace: String,\n    iniState?: Object,\n    reducers?: Map<ReducerFunction>,\n    singleton?: Boolean,\n  }\n  ```\n\n  1. `namespace: String`\n\n    The namespace of the model.\n\n  2. `iniState?: Object`\n\n    Defines the initial state of the namespace. It will act as default if an instance is not found. Also *redux-mvc* will create a *getter* and *setter* for each key in the iniState object.\n\n    **Default:** `false`.\n\n  3. `reducers?: Map<ReducerFunction>`\n\n    Defines the reducers with the following signature of the model.\n\n    ```ts\n    ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n    ```\n\n    *redux-mvc* will shallow merge the returned partial state to the previous state.\n    *redux-mvc* will create one *ActionCreator* for each *key* in the *reducers* Map.\n\n    **Default:** `{}`.\n\n  4. `singleton?: Boolean`\n\n    Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n    **Default:** `false`\n\n### Return value\n\n- **model**\n\n  ```ts\n  Model: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n---\n  \n## getter\n\nReturns *key* property from the *state*\n\n```ts\nGetter<key>: (state: Object, props?: Object) -> Pick<state, key>\n```\n\n### Parameters\n\n  1. `state: Object`\n\n    The module's *state* Object.\n\n  2. `props?: Object`\n\n    The only prop that *getters* use is *props.instanceId* to return the *key* from the specified *instanceId*. \n\n    If the *instanceId* is not found, the *getter* will return the *DEFAULT_INSTANCE_ID* slice.\n\n    **Default:** `{}`\n   \n### Special getters\n\n*redux-mvc* will provide 3 special *getters* in case you need them:\n\n  1. `getters.instance`\n\n    Will return the entire *instance* object specified by the *instanceId* as props.\n\n  2. `getters.namespace`\n\n    Will return the entire *namespace* object.\n\n  3. `getters.module`\n\n    Same as the *identity* function, it will return the entire module state.\n\n---\n\n\n## actionCreator\n\n  Creates an *ActionPayload* out of *payload*, *props* and *error*\n\n  ```ts\n  ActionCreator: (payload?: Any, props?: Object, error?: Any) -> ActionPayload\n  ```\n\n### Parameters\n\n  1. `payload?: Any`\n\n    Any information that should be communicated through the action\n\n    **Default:** `undefined`\n\n  2. `props?: Object`\n\n    Additional info that should be sent in the *ActionPayload*. E.g.: *meta*, *optimist*...\n\n    **Note:** *meta.instanceId* is used by *redux-mvc* to specify the target instance of the *action*.\n\n    **Default:** `{}`\n\n  3. `error?: Boolean`\n\n    Specify if there was an error or not.\n\n    **Default:** `false`\n\n### Return value\n\n  - **action**\n  ```ts\n  ActionPayload: {\n    payload: Any,\n    ...props,\n    error: Boolean\n  }\n  ```\n","type":"Mdx","contentDigest":"54407859e3900274a85935a0c812a854","counter":103,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Model Docs","tabs":["Usage","Docs"],"description":"Model Docs"},"exports":{},"rawBody":"---\ntitle: Model Docs\ntabs: ['Usage', 'Docs']\ndescription: Model Docs\n---\n\n<AnchorLinks>\n  <AnchorLink>createModel</AnchorLink>\n  <AnchorLink>getter</AnchorLink>\n  <AnchorLink>actionCreator</AnchorLink>\n</AnchorLinks>\n\n## createModel\n\nCreates a *redux-mvc* model: *getters*, *setters* and *actionCreators*\n\n```js\ncreateModel(definition: ModelDefinition)\n```\n\n### Parameters\n\n  - **definition**\n\n  ```js\n  ModelDefinitionInterface: {\n    namespace: String,\n    iniState?: Object,\n    reducers?: Map<ReducerFunction>,\n    singleton?: Boolean,\n  }\n  ```\n\n  1. `namespace: String`\n\n    The namespace of the model.\n\n  2. `iniState?: Object`\n\n    Defines the initial state of the namespace. It will act as default if an instance is not found. Also *redux-mvc* will create a *getter* and *setter* for each key in the iniState object.\n\n    **Default:** `false`.\n\n  3. `reducers?: Map<ReducerFunction>`\n\n    Defines the reducers with the following signature of the model.\n\n    ```ts\n    ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n    ```\n\n    *redux-mvc* will shallow merge the returned partial state to the previous state.\n    *redux-mvc* will create one *ActionCreator* for each *key* in the *reducers* Map.\n\n    **Default:** `{}`.\n\n  4. `singleton?: Boolean`\n\n    Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n    **Default:** `false`\n\n### Return value\n\n- **model**\n\n  ```ts\n  Model: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n---\n  \n## getter\n\nReturns *key* property from the *state*\n\n```ts\nGetter<key>: (state: Object, props?: Object) -> Pick<state, key>\n```\n\n### Parameters\n\n  1. `state: Object`\n\n    The module's *state* Object.\n\n  2. `props?: Object`\n\n    The only prop that *getters* use is *props.instanceId* to return the *key* from the specified *instanceId*. \n\n    If the *instanceId* is not found, the *getter* will return the *DEFAULT_INSTANCE_ID* slice.\n\n    **Default:** `{}`\n   \n### Special getters\n\n*redux-mvc* will provide 3 special *getters* in case you need them:\n\n  1. `getters.instance`\n\n    Will return the entire *instance* object specified by the *instanceId* as props.\n\n  2. `getters.namespace`\n\n    Will return the entire *namespace* object.\n\n  3. `getters.module`\n\n    Same as the *identity* function, it will return the entire module state.\n\n---\n\n\n## actionCreator\n\n  Creates an *ActionPayload* out of *payload*, *props* and *error*\n\n  ```ts\n  ActionCreator: (payload?: Any, props?: Object, error?: Any) -> ActionPayload\n  ```\n\n### Parameters\n\n  1. `payload?: Any`\n\n    Any information that should be communicated through the action\n\n    **Default:** `undefined`\n\n  2. `props?: Object`\n\n    Additional info that should be sent in the *ActionPayload*. E.g.: *meta*, *optimist*...\n\n    **Note:** *meta.instanceId* is used by *redux-mvc* to specify the target instance of the *action*.\n\n    **Default:** `{}`\n\n  3. `error?: Boolean`\n\n    Specify if there was an error or not.\n\n    **Default:** `false`\n\n### Return value\n\n  - **action**\n  ```ts\n  ActionPayload: {\n    payload: Any,\n    ...props,\n    error: Boolean\n  }\n  ```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/model/docs.mdx"}}}}