{"componentChunkName":"component---src-pages-api-model-create-model-index-mdx","path":"/Api/Model/CreateModel/","result":{"pageContext":{"frontmatter":{},"relativePagePath":"/Api/Model/CreateModel/index.mdx","titleType":"page","MdxNode":{"id":"3480d71a-7c05-5321-8daa-787ac796009b","children":[],"parent":"1826b91e-88ab-5c9d-ade9-4d5af859e151","internal":{"content":"# createModel(definition)\n\nCreates a `redux-mvc` model: `getters`, `setters` and `action creators`\n\n## Arguments\n\n  ```ts\n  definition = {\n    namespace: String,\n    iniState?: Object,\n    reducers?: Map<ReducerFunction>,\n    singleton?: Boolean,\n  } : ModelDefinitionInterface\n  ```\n\n1. `namespace: String`\n\n  The namespace of the model.\n\n2. `iniState?: Object`\n\n  Defines the initial state of the namespace. It will act as default if an instance is not found. Also `redux-mvc` will create a `getter` and `setter` for each key in the iniState object.\n\n  * Default: `false`.\n\n3. `reducers?: Map<ReducerFunction>`\n\n  Defines the reducers with the following signature of the model.\n\n  ```ts\n  ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n  ```\n\n  `redux-mvc` will shallow merge the returned partial state to the previous state.\n  `redux-mvc` will create one *ActionCreator* for each `key` in the `reducers` Map.\n\n  * Default: `{}`.\n\n4. `singleton?: Boolean`\n\n  Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n  * Default: `false`\n\n## Return value\n\n  ```ts\n  ModelInterface: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n","type":"Mdx","contentDigest":"d2cc4fc74d9af585355d834a584b73a2","counter":95,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":""},"exports":{},"rawBody":"# createModel(definition)\n\nCreates a `redux-mvc` model: `getters`, `setters` and `action creators`\n\n## Arguments\n\n  ```ts\n  definition = {\n    namespace: String,\n    iniState?: Object,\n    reducers?: Map<ReducerFunction>,\n    singleton?: Boolean,\n  } : ModelDefinitionInterface\n  ```\n\n1. `namespace: String`\n\n  The namespace of the model.\n\n2. `iniState?: Object`\n\n  Defines the initial state of the namespace. It will act as default if an instance is not found. Also `redux-mvc` will create a `getter` and `setter` for each key in the iniState object.\n\n  * Default: `false`.\n\n3. `reducers?: Map<ReducerFunction>`\n\n  Defines the reducers with the following signature of the model.\n\n  ```ts\n  ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n  ```\n\n  `redux-mvc` will shallow merge the returned partial state to the previous state.\n  `redux-mvc` will create one *ActionCreator* for each `key` in the `reducers` Map.\n\n  * Default: `{}`.\n\n4. `singleton?: Boolean`\n\n  Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n  * Default: `false`\n\n## Return value\n\n  ```ts\n  ModelInterface: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/Api/Model/CreateModel/index.mdx"}}}}