{"componentChunkName":"component---src-pages-module-definition-usage-mdx","path":"/module/definition/usage/","result":{"pageContext":{"frontmatter":{"title":"Defining the Module","tabs":["Usage","Docs"],"description":"Guide for defining the redux-mvc module"},"relativePagePath":"/module/definition/usage.mdx","titleType":"page","MdxNode":{"id":"019ce563-0d05-5216-bf18-39dc7137908e","children":[],"parent":"344b2684-7a08-581f-b333-2c8c98db5ccf","internal":{"content":"---\ntitle: Defining the Module\ntabs: ['Usage', 'Docs']\ndescription: Guide for defining the redux-mvc module\n---\n<PageDescription>\n\n*Modules* are created by enhancing or decorating a *model*.\n\n</PageDescription>\n\n# Decorators\n\nThe module definition is based in using *decorators* that incrementally add functionality to a *model* or *module*.\n\n- The minimum module requirements are:\n\n  1. Adding the *reducer*\n  2. Adding the *lifeCycle* methods (for creating the store object)\n  \n  ```ts\n  import * as R from \"ramda\"\n  import { addLifecycle, addReducer } from \"@redux-mvc/core\"\n\n  const newModule = R.compose(\n      addLifecycle(),\n      addReducer(),\n  )(model)\n\n  ```\n\n  **Note:** remember function composition works from right to left\n  \n- The *decorators* api is just objects and function composition, then *redux-mvc* gives you the possibility of writing your own *addReducer* and *addLifecycle*, or any other *decorator* to customize the framework.\n\n  E.g.: The *createModule* decorator is the composition of *addLifecycle* and *addReducer*, and you can define your own.\n\n    ```ts\n    import * as R from \"ramda\"\n    import { addLifecycle, addReducer } from \"@redux-mvc/core\"\n\n    const createModule = R.compose(\n        addLifecycle(),\n        addReducer(),\n    )\n\n    ```\n\n","type":"Mdx","contentDigest":"64a3ec33bd46866448ee1fb1bb631492","counter":98,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Defining the Module","tabs":["Usage","Docs"],"description":"Guide for defining the redux-mvc module"},"exports":{},"rawBody":"---\ntitle: Defining the Module\ntabs: ['Usage', 'Docs']\ndescription: Guide for defining the redux-mvc module\n---\n<PageDescription>\n\n*Modules* are created by enhancing or decorating a *model*.\n\n</PageDescription>\n\n# Decorators\n\nThe module definition is based in using *decorators* that incrementally add functionality to a *model* or *module*.\n\n- The minimum module requirements are:\n\n  1. Adding the *reducer*\n  2. Adding the *lifeCycle* methods (for creating the store object)\n  \n  ```ts\n  import * as R from \"ramda\"\n  import { addLifecycle, addReducer } from \"@redux-mvc/core\"\n\n  const newModule = R.compose(\n      addLifecycle(),\n      addReducer(),\n  )(model)\n\n  ```\n\n  **Note:** remember function composition works from right to left\n  \n- The *decorators* api is just objects and function composition, then *redux-mvc* gives you the possibility of writing your own *addReducer* and *addLifecycle*, or any other *decorator* to customize the framework.\n\n  E.g.: The *createModule* decorator is the composition of *addLifecycle* and *addReducer*, and you can define your own.\n\n    ```ts\n    import * as R from \"ramda\"\n    import { addLifecycle, addReducer } from \"@redux-mvc/core\"\n\n    const createModule = R.compose(\n        addLifecycle(),\n        addReducer(),\n    )\n\n    ```\n\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/module/definition/usage.mdx"}}}}