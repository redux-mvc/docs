{"componentChunkName":"component---src-pages-module-definition-docs-3-mdx","path":"/module/definition/docs3/","result":{"pageContext":{"frontmatter":{"title":"Decorators","tabs":["Usage","Docs"],"description":"Decorators api docs"},"relativePagePath":"/module/definition/docs3.mdx","titleType":"page","MdxNode":{"id":"05d34224-2dab-5bf9-a437-a9e8144b5f1d","children":[],"parent":"ce83560a-2914-5499-97d9-bb4828a3f3c7","internal":{"content":"---\ntitle: Decorators\ntabs: ['Usage', 'Docs']\ndescription: Decorators api docs\n---\n\n# createModel\n\n<PageDescription>\n\nCreates a *redux-mvc* model: *getters*, *setters* and *actionCreators*\n\n</PageDescription>\n\n```js\ncreateModel(definition: ModelDefinitionInterface)\n```\n\n## Arguments\n\n```ts\ndefinition = {\n  namespace: String,\n  iniState?: Object,\n  reducers?: Map<ReducerFunction>,\n  singleton?: Boolean,\n} : ModelDefinitionInterface\n```\n\n1. `namespace: String`\n\n  The namespace of the model.\n\n2. `iniState?: Object`\n\n  Defines the initial state of the namespace. It will act as default if an instance is not found. Also *redux-mvc* will create a *getter* and *setter* for each key in the iniState object.\n\n  **Default:** `false`.\n\n3. `reducers?: Map<ReducerFunction>`\n\n  Defines the reducers with the following signature of the model.\n\n  ```ts\n  ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n  ```\n\n  *redux-mvc* will shallow merge the returned partial state to the previous state.\n  *redux-mvc* will create one *ActionCreator* for each *key* in the *reducers* Map.\n\n   **Default:** `{}`.\n\n4. `singleton?: Boolean`\n\n  Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n  **Default:** `false`\n\n## Return value\n\n  ```ts\n  ModelInterface: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n  \n# getter\n\n<PageDescription>\n\nReturns *key* property from the *state*\n\n</PageDescription>\n\n```ts\nGetter<key>: (state: Object, props?: Object) -> Pick<state, key>\n```\n\n## Arguments\n\n1. `state: Object`\n\n  The module's *state* Object.\n\n2. `props?: Object`\n\n   The only prop that *getters* use is *props.instanceId* to return the *key* from the specified *instanceId*. \n   \n   If the *instanceId* is not found, the *getter* will return the *DEFAULT_INSTANCE_ID* slice.\n\n   **Default:** `{}`\n   \n## Special getters\n\n*redux-mvc* will provide 3 special *getters* in case you need them:\n\n1. `getters.instance`\n\n  Will return the entire *instance* object specified by the *instanceId* as props.\n\n2. `getters.namespace`\n\n  Will return the entire *namespace* object.\n   \n3. `getters.module`\n\n  Same as the *identity* function, it will return the entire module state.\n\n\n# actionCreator\n\n<PageDescription>\n\nCreates an *ActionPayload* out of *payload*, *props* and *error*\n\n</PageDescription>\n\n```js\nActionCreator: (payload?: Any, props?: Object, error?: Any) -> ActionPayload\n```\n\n## Arguments\n\n1. `payload?: Any`\n\n  Any information that should be communicated through the action\n\n  **Default:** `undefined`\n\n2. `props?: Object`\n\n  Additional info that should be sent in the *ActionPayload*. E.g.: *meta*, *optimist*...\n\n  **Note:** *meta.instanceId* is used by *redux-mvc* to specify the target instance of the *action*.\n\n  **Default:** `{}`\n\n3. `error?: Boolean`\n\n   Specify if there was an error or not.\n\n  **Default:** `false`\n\n## Return value\n\n```ts\nActionPayload: {\n   payload: Any,\n   ...props,\n   error: Boolean\n}\n```\n","type":"Mdx","contentDigest":"b5d496538c421dea4fbd4ac80042ede2","counter":183,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Decorators","tabs":["Usage","Docs"],"description":"Decorators api docs"},"exports":{},"rawBody":"---\ntitle: Decorators\ntabs: ['Usage', 'Docs']\ndescription: Decorators api docs\n---\n\n# createModel\n\n<PageDescription>\n\nCreates a *redux-mvc* model: *getters*, *setters* and *actionCreators*\n\n</PageDescription>\n\n```js\ncreateModel(definition: ModelDefinitionInterface)\n```\n\n## Arguments\n\n```ts\ndefinition = {\n  namespace: String,\n  iniState?: Object,\n  reducers?: Map<ReducerFunction>,\n  singleton?: Boolean,\n} : ModelDefinitionInterface\n```\n\n1. `namespace: String`\n\n  The namespace of the model.\n\n2. `iniState?: Object`\n\n  Defines the initial state of the namespace. It will act as default if an instance is not found. Also *redux-mvc* will create a *getter* and *setter* for each key in the iniState object.\n\n  **Default:** `false`.\n\n3. `reducers?: Map<ReducerFunction>`\n\n  Defines the reducers with the following signature of the model.\n\n  ```ts\n  ReducerFunction: (state: Object, action: ActionPayload) -> Partial<state>\n  ```\n\n  *redux-mvc* will shallow merge the returned partial state to the previous state.\n  *redux-mvc* will create one *ActionCreator* for each *key* in the *reducers* Map.\n\n   **Default:** `{}`.\n\n4. `singleton?: Boolean`\n\n  Defines if the model is a singleton, one per each context. Meaning that every action goes to the default instance, and every getter returns the state of the default instance.\n\n  **Default:** `false`\n\n## Return value\n\n  ```ts\n  ModelInterface: {\n    namespace: String,\n    iniState: Object,\n    reducers: Map<ReducerFunction>,\n    singleton: Boolean,\n    actions: Map<ActionCreator>,\n    getters: Map<Getter>,\n  }\n  ```\n  \n# getter\n\n<PageDescription>\n\nReturns *key* property from the *state*\n\n</PageDescription>\n\n```ts\nGetter<key>: (state: Object, props?: Object) -> Pick<state, key>\n```\n\n## Arguments\n\n1. `state: Object`\n\n  The module's *state* Object.\n\n2. `props?: Object`\n\n   The only prop that *getters* use is *props.instanceId* to return the *key* from the specified *instanceId*. \n   \n   If the *instanceId* is not found, the *getter* will return the *DEFAULT_INSTANCE_ID* slice.\n\n   **Default:** `{}`\n   \n## Special getters\n\n*redux-mvc* will provide 3 special *getters* in case you need them:\n\n1. `getters.instance`\n\n  Will return the entire *instance* object specified by the *instanceId* as props.\n\n2. `getters.namespace`\n\n  Will return the entire *namespace* object.\n   \n3. `getters.module`\n\n  Same as the *identity* function, it will return the entire module state.\n\n\n# actionCreator\n\n<PageDescription>\n\nCreates an *ActionPayload* out of *payload*, *props* and *error*\n\n</PageDescription>\n\n```js\nActionCreator: (payload?: Any, props?: Object, error?: Any) -> ActionPayload\n```\n\n## Arguments\n\n1. `payload?: Any`\n\n  Any information that should be communicated through the action\n\n  **Default:** `undefined`\n\n2. `props?: Object`\n\n  Additional info that should be sent in the *ActionPayload*. E.g.: *meta*, *optimist*...\n\n  **Note:** *meta.instanceId* is used by *redux-mvc* to specify the target instance of the *action*.\n\n  **Default:** `{}`\n\n3. `error?: Boolean`\n\n   Specify if there was an error or not.\n\n  **Default:** `false`\n\n## Return value\n\n```ts\nActionPayload: {\n   payload: Any,\n   ...props,\n   error: Boolean\n}\n```\n","fileAbsolutePath":"/Users/gonzaloacosta/workspace/redux-mvc-docs/src/pages/module/definition/docs3.mdx"}}}}