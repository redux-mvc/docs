{"componentChunkName":"component---src-pages-getting-started-mdx","path":"/getting-started/","result":{"pageContext":{"frontmatter":{"title":"Getting started","description":"Getting started with redux-mvc"},"relativePagePath":"/getting-started.mdx","titleType":"page","MdxNode":{"id":"68cca966-5fb5-5775-b9ea-1e4b76d3b0a6","children":[],"parent":"5ded1694-864c-5f7e-911c-8924c097e8c6","internal":{"content":"---\ntitle: Getting started\ndescription: Getting started with redux-mvc\n---\n\n<PageDescription>\n\nInstallation and basic setup for the *redux-mvc* counter example.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>Installation</AnchorLink>\n  <AnchorLink>Folder Structure</AnchorLink>\n  <AnchorLink>Model</AnchorLink>\n  <AnchorLink>View</AnchorLink>\n  <AnchorLink>Module</AnchorLink>\n  <AnchorLink>Context</AnchorLink>\n</AnchorLinks>\n\n## Installation\n\n\n  ```shell\n  npm install @redux-mvc/core\n  ```\n\n### Dependencies\n\n  ```shell\n  npm install redux react react-dom\n  ```\n  \n## Folder Structure\n\n  ```ts\n  Counter\n    | index.js // module file\n    | model.js // model file\n    | View \n      | index.js // context file\n      | Counter.js // counter view file\n    \n  ```\n  \n  **Note:** render the module by requiring `Counter/View`\n\n## Model\n\nThe *model* is the business logic layer where the state updates happen. \n\nYou can define the *iniState* and *reducers* in it and *redux-mvc* will dynamically generate *actions* and *getters* for you so you avoid writing a bit of boilerplate.\n\n  ```ts\n  import { createModel } from \"@redux-mvc/core\"\n\n  const model = createModel({\n      iniState: {\n          count: 0,\n      },\n      reducers: {\n          add: (state, action) => ({ count: state.count + 1 }),\n          reset: (state, action) => ({ count: 0 }),\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n\n  export default model\n  ```\n\n## View\n\nThe *view* is the presentational layer. By using dependency injection we can keep it as stateless as possible.\n\n  ```ts\n  import React from \"react\"\n  import { connect } from \"@redux-mvc/core\"\n\n  import { getters, actions } from \"./model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      count = 0,\n      add,\n      reset,\n  }) => (\n      <div style={{ display: \"flex\" }}>\n          <div style={{ marginRight: 10 }}>Count:</div>\n          <button\n              style={{ marginRight: 10 }}\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n  )\n\n  export default decorate(Counter)\n  ```\n\n## Module\n\nThe *module* is the configuration layer. In this case it adds lifecycle methods required by the *context*.\n\n  ```ts\n  import { createModule } from \"@redux-mvc/core\"\n\n  import model from \"./model.js\"\n\n  const module = createModule(model)\n\n  export default module\n  \n  ```\n\n## Context\n\nThe *context* is where you run an instance of a *module*. \n\n  ```ts\n  import React from \"react\"\n  import { createContext } from \"@redux-mvc/core\"\n\n  import module from \"../index\"\n  import Counter from \"./Counter.js\"\n\n  const decorate = createContext({\n      module,\n  }),\n\n  export default decorate(Counter)\n\n  ```\n  \n  \n\n","type":"Mdx","contentDigest":"de1cea8647b37f23fc9a37d293f5bd40","counter":97,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Getting started","description":"Getting started with redux-mvc"},"exports":{},"rawBody":"---\ntitle: Getting started\ndescription: Getting started with redux-mvc\n---\n\n<PageDescription>\n\nInstallation and basic setup for the *redux-mvc* counter example.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>Installation</AnchorLink>\n  <AnchorLink>Folder Structure</AnchorLink>\n  <AnchorLink>Model</AnchorLink>\n  <AnchorLink>View</AnchorLink>\n  <AnchorLink>Module</AnchorLink>\n  <AnchorLink>Context</AnchorLink>\n</AnchorLinks>\n\n## Installation\n\n\n  ```shell\n  npm install @redux-mvc/core\n  ```\n\n### Dependencies\n\n  ```shell\n  npm install redux react react-dom\n  ```\n  \n## Folder Structure\n\n  ```ts\n  Counter\n    | index.js // module file\n    | model.js // model file\n    | View \n      | index.js // context file\n      | Counter.js // counter view file\n    \n  ```\n  \n  **Note:** render the module by requiring `Counter/View`\n\n## Model\n\nThe *model* is the business logic layer where the state updates happen. \n\nYou can define the *iniState* and *reducers* in it and *redux-mvc* will dynamically generate *actions* and *getters* for you so you avoid writing a bit of boilerplate.\n\n  ```ts\n  import { createModel } from \"@redux-mvc/core\"\n\n  const model = createModel({\n      iniState: {\n          count: 0,\n      },\n      reducers: {\n          add: (state, action) => ({ count: state.count + 1 }),\n          reset: (state, action) => ({ count: 0 }),\n      },\n      namespace: \"Counter\",\n  })\n\n  const { actions, getters } = model\n\n  export { actions, getters }\n\n  export default model\n  ```\n\n## View\n\nThe *view* is the presentational layer. By using dependency injection we can keep it as stateless as possible.\n\n  ```ts\n  import React from \"react\"\n  import { connect } from \"@redux-mvc/core\"\n\n  import { getters, actions } from \"./model\"\n\n  const decorate = connect(\n      { count: getters.count },\n      { add: actions.add, reset: actions.reset }\n  )\n\n  const Counter = ({\n      count = 0,\n      add,\n      reset,\n  }) => (\n      <div style={{ display: \"flex\" }}>\n          <div style={{ marginRight: 10 }}>Count:</div>\n          <button\n              style={{ marginRight: 10 }}\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n  )\n\n  export default decorate(Counter)\n  ```\n\n## Module\n\nThe *module* is the configuration layer. In this case it adds lifecycle methods required by the *context*.\n\n  ```ts\n  import { createModule } from \"@redux-mvc/core\"\n\n  import model from \"./model.js\"\n\n  const module = createModule(model)\n\n  export default module\n  \n  ```\n\n## Context\n\nThe *context* is where you run an instance of a *module*. \n\n  ```ts\n  import React from \"react\"\n  import { createContext } from \"@redux-mvc/core\"\n\n  import module from \"../index\"\n  import Counter from \"./Counter.js\"\n\n  const decorate = createContext({\n      module,\n  }),\n\n  export default decorate(Counter)\n\n  ```\n  \n  \n\n","fileAbsolutePath":"/home/gonzalo/workspace/mac/redux-mvc-docs/src/pages/getting-started.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","768070550"]}