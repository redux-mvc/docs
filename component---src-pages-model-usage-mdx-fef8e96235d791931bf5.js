(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{ig2R:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return m}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),r=n("013z");n("qKvR");function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={},b=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},l=b("PageDescription"),i=b("AnchorLinks"),p=b("AnchorLink"),s={_frontmatter:o},u=r.a;function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(u,c({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(l,{mdxType:"PageDescription"},Object(a.b)("p",null,"The model will be defined by the initial state and reducers, just like plain redux."),Object(a.b)("p",null,"The main difference is that ",Object(a.b)("em",{parentName:"p"},"redux-mvc")," will dynamically create ",Object(a.b)("em",{parentName:"p"},"getters")," and ",Object(a.b)("em",{parentName:"p"},"actions")," for you.")),Object(a.b)(i,{mdxType:"AnchorLinks"},Object(a.b)(p,{mdxType:"AnchorLink"},"Getters"),Object(a.b)(p,{mdxType:"AnchorLink"},"Setters"),Object(a.b)(p,{mdxType:"AnchorLink"},"Reducers"),Object(a.b)(p,{mdxType:"AnchorLink"},"Actions")),Object(a.b)("h2",null,"iniState"),Object(a.b)("h3",null,"Getters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"For each property key in the initial state a ",Object(a.b)("em",{parentName:"p"},"getter")," function will be created:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-ts"}),'const model = createModel({\n    iniState: {\n      count: 0,\n    },\n    namespace: "Counter",\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n')),Object(a.b)("p",{parentName:"li"},"will generate a count ",Object(a.b)("em",{parentName:"p"},"getter")," (selector) to get the count out of the current state"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),'import { getters } from "./model"\n\nconst decorate = connect(\n    { count: getters.count },\n    ...\n)\n\nconst Counter = ({ \n    count = 0, \n    ...\n}) => (\n    <div ...>\n        Count: <input value={count} ... />\n    </div>\n)\n')))),Object(a.b)("h3",null,"Setters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Similar to the getters, for each property key of the initial state a ",Object(a.b)("em",{parentName:"p"},"setter")," function will be created:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),'const model = createModel({\n    iniState: {\n      count: 0,\n    },\n    namespace: "Counter",\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n')),Object(a.b)("p",{parentName:"li"},"will generate a count ",Object(a.b)("em",{parentName:"p"},"setter")," (action) to set the count out of the current state"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-ts"}),'import { actions } from "./model"\n\nconst decorate = connect(\n    ...\n    {\n        setCount: e => actions.setCount(Number(e.target.value)),\n    }\n)\n\nconst Counter = ({ \n    setCount = noop, \n    ...\n}) => (\n    <div ...>\n        Count: <input onChange={setCount} ... />\n    </div>\n)\n')),Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Note:")," Check that the ",Object(a.b)("em",{parentName:"p"},"setters")," will be prefixed with ",Object(a.b)("em",{parentName:"p"},"set"),". E.g.: for the ",Object(a.b)("em",{parentName:"p"},"count")," key the ",Object(a.b)("em",{parentName:"p"},"setter")," would be ",Object(a.b)("em",{parentName:"p"},"setCount"),"."))),Object(a.b)("h2",null,"Reducers"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The module reducer will be created out of a collection of reducer functions:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-ts"}),"const model = createModel({\n    reducers: {\n        add: ({ count }) => ({ count: count + 1 }),\n        reset: R.always(iniState),\n    },\n    ...\n})\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The reducers will take ",Object(a.b)("inlineCode",{parentName:"p"},"state")," and ",Object(a.b)("inlineCode",{parentName:"p"},"action")," as parameters, and they will return the partial state to be updated. ")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The returned partial state will be shallow merged with the previous state."))),Object(a.b)("h3",null,"Actions"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"redux-mvc")," will also dynamically create one ",Object(a.b)("em",{parentName:"p"},"action creator")," for each reducer function."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given this model"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-ts"}),"const model = createModel({\n    reducers: {\n        add: ({ count }) => ({ count: count + 1 }),\n        reset: R.always(iniState),\n    },\n    ...\n})\n\nconst { actions, getters } = model\n\nexport { actions, getters }\n")),Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"add")," and ",Object(a.b)("inlineCode",{parentName:"p"},"reset")," actions will be dynamically generated and can later be used in views:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",c({parentName:"pre"},{className:"language-ts"}),'import { actions } from "./model"\n\nconst decorate = connect(\n    ...\n    { add: actions.add, reset: actions.reset }\n)\n\nconst Counter = ({\n    add = noop,\n    reset = noop,\n    ...\n}) => (\n    <div ...>\n        <button style={{ marginRight: 10 }} onClick={add}>\n            add\n        </button>\n        <button style={{ marginRight: 10 }} onClick={reset}>\n            reset\n        </button>\n        ...\n    </div>\n)\n')))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-model-usage-mdx-fef8e96235d791931bf5.js.map