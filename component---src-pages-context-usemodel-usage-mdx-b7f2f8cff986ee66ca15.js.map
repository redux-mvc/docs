{"version":3,"sources":["webpack:///./src/pages/context/usemodel/usage.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,iCAAgB,kBAAIC,WAAW,KAAf,SAAhB,gCAAkF,kBAAIA,WAAW,KAAf,kBAAlF,gCAEF,qDAAoC,kBAAIA,WAAW,KAAf,WAApC,uCAA+G,kBAAIA,WAAW,KAAf,cAA/G,8BAAoL,kBAAIA,WAAW,KAAf,eAApL,0DACA,+BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8iBAmCTH,EAAWI,gBAAiB","file":"component---src-pages-context-usemodel-usage-mdx-b7f2f8cff986ee66ca15.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/gonzaloacosta/workspace/redux-mvc-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Consumes `}<em parentName=\"p\">{`state`}</em>{` from the context and wrapps `}<em parentName=\"p\">{`actionCreators`}</em>{` in the contextâ€™s dispatch.`}</p>\n    </PageDescription>\n    <p>{`The main difference with the `}<em parentName=\"p\">{`connect`}</em>{` Hoc is that it would not apply the `}<em parentName=\"p\">{`instanceId`}</em>{` into the context, nor the `}<em parentName=\"p\">{`renderLevel`}</em>{` that ensures the parents of a component render first.`}</p>\n    <h3>{`E.g.:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useModel } from \"@redux-mvc/core\"\n\nconst Component = () => {\n    const { count, add } = useModel({\n      count: getters.count,\n    }, {\n      add: actions.add,\n      add: actions.reset\n    }, {\n      instanceId: \"customInstanceId\"\n    })\n\n\n    return (\n      <div>\n          <button\n              onClick={add}\n          >\n              add\n          </button>\n          <button style={{ marginRight: 10 }} onClick={reset}>\n              reset\n          </button>\n          <div>{count}</div>\n      </div>\n    )\n}\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}