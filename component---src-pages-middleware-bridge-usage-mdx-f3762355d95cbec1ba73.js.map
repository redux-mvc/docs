{"version":3,"sources":["webpack:///./src/pages/middleware/bridge/usage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mCACA,qBAAG,kBAAIC,WAAW,KAAf,aAAH,sKACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sDAA0E,kBAAIA,WAAW,KAAf,aAA1E,4BAA4I,kBAAIA,WAAW,KAAf,qBAA5I,KACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,2FASvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wFAA4G,kBAAIA,WAAW,KAAf,aAA5G,sBACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,qNAWvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,kGAAsH,kBAAIA,WAAW,KAAf,oBAAtH,wBACA,mBAAKA,WAAW,MAAK,sBAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,yJAgB7BJ,EAAWK,gBAAiB","file":"component---src-pages-middleware-bridge-usage-mdx-f3762355d95cbec1ba73.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/gonzaloacosta/workspace/redux-mvc-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`addBridge`}</h2>\n    <p><em parentName=\"p\">{`redux-mvc`}</em>{` allows to setup a global context that can be accessible from every other child context. It is useful to put any data or state that will be reused among contexts.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To provide the global context you must specify the `}<em parentName=\"p\">{`contextId`}</em>{` as the special constant `}<em parentName=\"p\">{`GLOBAL_CONTEXT_ID`}</em>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`const decorate = createContext({\n   module,\n   contextId: GLOBAL_CONTEXT_ID\n})\n\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To consume state from the global context you must pass an array of namespaces to the `}<em parentName=\"p\">{`addBridge`}</em>{` module decorator:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`const newModule = R.compose(\n    addBridge({ trackGlobalNamespaces: [RoutingModel.namespace] })\n    ...\n)(module)\n\nNote: The actions from the global namespace will be forwarded to the local context.\n\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To choose what kind of actions can be dispatched to the global context you need to specify the `}<em parentName=\"p\">{`dispatchToGlobal`}</em>{` predicate function:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`const newModule = R.compose(\n    addBridge({ \n      dispatchToGlobal: action => action.type === \"Routing/push\" \n    })\n    ...\n)(module)\n\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}