{"version":3,"sources":["webpack:///./src/pages/middleware/bridge/usage.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,qBAAG,kBAAIC,WAAW,KAAf,aAAH,uKAEF,2EAA0D,kBAAIA,WAAW,KAAf,aAA1D,4BAA4H,kBAAIA,WAAW,KAAf,qBAA5H,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4FAQL,6GAA4F,kBAAIA,WAAW,KAAf,aAA5F,sBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oNAUL,uHAAsG,kBAAIA,WAAW,KAAf,oBAAtG,wBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uJAcTH,EAAWI,gBAAiB","file":"component---src-pages-middleware-bridge-usage-mdx-77103a405b8f5c154960.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/gonzaloacosta/workspace/redux-mvc-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p><em parentName=\"p\">{`redux-mvc`}</em>{` allows to setup a global context that can be accessible from every other child context. It is useful to put any data or state that will be reused among contexts.`}</p>\n    </PageDescription>\n    <p>{`To provide the global context you must specify the `}<em parentName=\"p\">{`contextId`}</em>{` as the special constant `}<em parentName=\"p\">{`GLOBAL_CONTEXT_ID`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const decorate = createContext({\n    module,\n    contextId: GLOBAL_CONTEXT_ID\n})\n\n`}</code></pre>\n    <p>{`To consume state from the global context you must pass an array of namespaces to the `}<em parentName=\"p\">{`addBridge`}</em>{` module decorator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const newModule = R.compose(\n    addBridge({ trackGlobalNamespaces: [RoutingModel.namespace] })\n    ...\n)(module)\n\nNote: The actions from the global namespace will be forwarded to the local context.\n\n`}</code></pre>\n    <p>{`To choose what kind of actions can be dispatched to the global context you need to specify the `}<em parentName=\"p\">{`dispatchToGlobal`}</em>{` predicate function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const newModule = R.compose(\n    addBridge({ \n      dispatchToGlobal: action => action.type === \"Routing/push\" \n    })\n    ...\n)(module)\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}